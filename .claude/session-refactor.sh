#!/bin/bash

# Terminal Forge Session Automation Script
# Automates refactoring and quality checks per development session

set -e

echo "🚀 Starting Terminal Forge session automation..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check git status and analyze changes
analyze_session() {
    print_status "Analyzing git status..."
    
    # Check for modified files
    MODIFIED_FILES=$(git status --porcelain | grep -E "^(M|MM)" | cut -c4- || true)
    UNTRACKED_FILES=$(git status --porcelain | grep "^??" | cut -c4- || true)
    
    if [ -n "$MODIFIED_FILES" ]; then
        print_status "Modified files detected:"
        echo "$MODIFIED_FILES" | while read file; do
            echo "  - $file"
        done
    fi
    
    if [ -n "$UNTRACKED_FILES" ]; then
        print_status "Untracked files detected:"
        echo "$UNTRACKED_FILES" | while read file; do
            echo "  - $file"
        done
    fi
}

# Run quality checks
run_quality_checks() {
    print_status "Running quality checks..."
    
    # TypeScript type checking
    if npm run typecheck; then
        print_success "TypeScript type checking passed"
    else
        print_error "TypeScript type checking failed"
        return 1
    fi
    
    # Linting
    if npm run lint; then
        print_success "Linting passed"
    else
        print_warning "Linting issues found - attempting auto-fix..."
        # Try to auto-fix linting issues
        if npm run lint -- --fix 2>/dev/null; then
            print_success "Auto-fixed linting issues"
        else
            print_error "Could not auto-fix all linting issues"
        fi
    fi
    
    # Run tests if they exist
    if npm test 2>/dev/null; then
        print_success "Tests passed"
    else
        print_warning "Tests failed or not configured"
    fi
}

# Check for Rust security vulnerabilities
check_rust_security() {
    print_status "Checking Rust dependencies for security vulnerabilities..."
    
    if command -v cargo-audit &> /dev/null; then
        if cargo audit; then
            print_success "No security vulnerabilities found in Rust dependencies"
        else
            print_warning "Security vulnerabilities found in Rust dependencies"
        fi
    else
        print_warning "cargo-audit not installed. Run: cargo install cargo-audit"
    fi
}

# Apply common refactoring patterns
apply_refactoring_patterns() {
    print_status "Applying common refactoring patterns..."
    
    # Check for large React components that should be split
    find src/components -name "*.tsx" -exec wc -l {} + | awk '$1 > 500 {print $2 " has " $1 " lines - consider splitting"}' || true
    
    # Check for missing error boundaries
    if ! grep -r "ErrorBoundary" src/components/ 2>/dev/null; then
        print_warning "No Error Boundaries found - consider adding them for better error handling"
    fi
    
    # Check for missing accessibility attributes
    MISSING_ALT=$(grep -r "<img" src/ | grep -v "alt=" || true)
    if [ -n "$MISSING_ALT" ]; then
        print_warning "Images without alt attributes found - consider adding for accessibility"
    fi
}

# Generate session summary
generate_summary() {
    print_status "Generating session summary..."
    
    CURRENT_TIME=$(date "+%Y-%m-%d %H:%M:%S")
    SUMMARY_FILE=".claude/session-summary-$(date +%Y%m%d-%H%M%S).md"
    
    mkdir -p .claude
    
    cat > "$SUMMARY_FILE" << EOF
# Session Summary - $CURRENT_TIME

## Modified Files
$(git status --porcelain | grep -E "^(M|MM)" | cut -c4- | sed 's/^/- /')

## Untracked Files  
$(git status --porcelain | grep "^??" | cut -c4- | sed 's/^/- /')

## Quality Check Results
- TypeScript: $(npm run typecheck > /dev/null 2>&1 && echo "✅ Passed" || echo "❌ Failed")
- Linting: $(npm run lint > /dev/null 2>&1 && echo "✅ Passed" || echo "⚠️ Issues found")
- Tests: $(npm test > /dev/null 2>&1 && echo "✅ Passed" || echo "⚠️ Not configured/Failed")

## Recommendations
- Consider splitting large components (>500 lines)
- Add Error Boundaries for better error handling
- Ensure accessibility attributes are present
- Keep dependencies updated and secure

Generated by Terminal Forge Session Automation
EOF
    
    print_success "Session summary generated: $SUMMARY_FILE"
}

# Main execution
main() {
    echo "🎯 Terminal Forge Session Automation"
    echo "====================================="
    
    analyze_session
    echo ""
    
    run_quality_checks
    echo ""
    
    check_rust_security
    echo ""
    
    apply_refactoring_patterns
    echo ""
    
    generate_summary
    echo ""
    
    print_success "Session automation completed!"
    echo "💡 Run 'git add . && git commit -m \"session: automated refactoring and quality improvements\"' to commit changes"
}

# Run if called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi